name: "Deployment Workflow"
# first you need to replace app_name_write_it_your_self with your app name
on:
  push:
    branches:
      - Deployment/Staging #on push actions on those branches
      - Deployment/Release #on push actions on those branches

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      - name: Checking Xcode version
        run: /usr/bin/xcodebuild -version

      - name: CheckingOut repository
        uses: actions/checkout@v3

      - name: Installing Apple certificates and Provisioning profiles
        env:
          RELEASE_CERTIFICATE_BASE64: "" #distribution certificate .p12 file converted to base 64 using cmd command "base64 -i certificate.p12 | pbcopy"
          BUILD_CERTIFICATE_BASE64: "" #distribution certificate .p12 file converted to base 64 using cmd command "base64 -i certificate.p12 | pbcopy"
          P12_PASSWORD: "" #if your certificate exported with password
          RELEASE_PROVISION_PROFILE_BASE64: "" #app store provision profile .mobileprovision file converted to base 64 using cmd command "base64 -i app.mobileprovision | pbcopy"
          BUILD_PROVISION_PROFILE_BASE64: "" #develop provision profile .mobileprovision file converted to base 64 using cmd command "base64 -i app.mobileprovision | pbcopy"
          KEYCHAIN_PASSWORD: "Test@1234"
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          R_CERTIFICATE_PATH=$RUNNER_TEMP/release_certificate.p12
          R_PP_PATH=$RUNNER_TEMP/release_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          echo -n "$RELEASE_CERTIFICATE_BASE64" | base64 --decode -o $R_CERTIFICATE_PATH
          echo -n "$RELEASE_PROVISION_PROFILE_BASE64" | base64 --decode -o $R_PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $R_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          cp $R_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Installing pods #if you have pods to install
        run: pod install

      - name: Archiving build
        run: |
          xcodebuild clean -workspace app_name_write_it_your_self.xcworkspace -scheme app_name_write_it_your_self
          xcodebuild archive -workspace app_name_write_it_your_self.xcworkspace -scheme app_name_write_it_your_self -archivePath $RUNNER_TEMP/app_name_write_it_your_self.xcarchive -destination generic/platform=iOS

      - name: Exporting ipa
        env:
          EXPORT_OPTIONS_PLIST: "" #archive and export your app once to get ExportOptions.plist file then convert it to base 64 using cmd command "base64 -i ExportOptions.plist | pbcopy"
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/app_name_write_it_your_self.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build

      - name: Installing private API key P8
        env:
          PRIVATE_API_KEY_BASE64: "" #app store connect api key .p8 file converted to base 64 using cmd command "base64 -i key.p8 | pbcopy"
          API_KEY: "" #key name short one like k5648r748rhf
        run: |
          mkdir -p ~/private_keys
          echo -n "$PRIVATE_API_KEY_BASE64" | base64 --decode --output ~/private_keys/AuthKey_$API_KEY.p8


      - name: Uploading TestFlight
        env:
          API_KEY: #key name short one like k5648r748rhf
          API_ISSUER: #issuer id long key name like "ddfkorkfef_ffrfr_frfrfr_frfrf"
          APP_PATH: ${{ runner.temp }}/build/app_name_write_it_your_self.ipa
        run: xcrun altool --upload-app --type ios -f $APP_PATH --apiKey $API_KEY --apiIssuer $API_ISSUER
